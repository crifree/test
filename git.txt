come si usa git e a cosa serve.
git serve a salvare via via il tuo progetto e ti consente di collaborare meglio con altri utenti nel team e di poter tornare insietro nelle vecchie versioni del tuo progetto.

 comandi per iniziare, da utilizzare nel terminale di vsc:
 -git version: restituisce la versione attuale di git;
 -git init: comando per iniziare.

 in pratica il file una volta creato e salvato nella working area, ovvero dentro vsc stesso, può essere spostato verso ,la staging area, prima di essere committato, tutto ciò avviene con questi comandi:
 -git status: restituisce un errore e specifica come dovresti aggiungere il file nella staging area, ovvero così:
 -git add file.txt: il file viene quindi aggiunto ed è pronto per essere eventualmente committato.
 -git commit -m "prima versione del progetto": in questo modo si committa, il comando -m consente di lasciare un commento così da riconoscere quali modifiche sono state apportate al file.

 una volta committao il file si può usare il comando -git log per visualizzare tutti i commit e da parte di quale utente.

 per skippare lo staging si può aggiungere il comando -a al committing:
 -git commit -a -m "blabla"

 prima di aggiungere il file nella staging area, si può eseguire un comando che mostri la differenza tra il nuovo cambiamento nella versione, e la versione precedente.
 -git diff.
 per uscire da questo comando e tornare al prompt bisogna premere q.

 per aggiungere piu file allo stesso tempo nella staging area, puo essere utile questo comando invece che scrivere ogni comando per piu file:
 -git add .
 e poi un semplice commit per committare.

 per vedere lo stato dei file esiste il comando 
 -git status, ma solo quando il file è stato addato alla staging area, quindi prima che sia stato committato.

 per eliminare un file bisogna anche rimuoverlo da git e non solo dalla working area, ciò può essere fatto con il comando 
 git rm --cached file.txt

creare un tag:
-git tag -a nomeTag -m "messaggio"
e per visualizzare i tags:
-git tag

per creare un nuovo branch:
-git branch -b nomeBranch
e per spostarsi di branch in branch si usa il comando:
-git switch nomeBranch
per verificare in quale branch si è si può usare il comando:
-git branch

per eliminare una branch:
git branch -d nomeBranch